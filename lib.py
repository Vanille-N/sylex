# SyLeX
#   Build descriptor for LaTeX

import os
import shutil
import jinja2 as j2

slx_dir = "/".join(d for d in __file__.split("/")[:-1] if d != ".")
templ_dir = f"{slx_dir}/templates"

local_slx_dir = ".sylex"
local_templ_dir = f"{local_slx_dir}/templates"
build_dir = "build"

py_files = ["error", "expand", "lib", "parse", "sylex"]
j2_mk_files = ["common", "pdf", "param", "deps"]
j2_files = ["Makefile", "texwatch"] + [f + ".tex.mk" for f in j2_mk_files]

date_modified = "2021-12-30"
now = __import__('datetime').datetime.now()
autogen_header = f"""\
# This file is autogenerated.
# It should not be edited manually, as it will be overwritten
# by `sylex init` without confirmation
#
# SyLeX
# Build tool for LaTeX
# Written by Vanille-N <vanille@crans.org> (Neven Villani)
#   https://github.com/Vanille-N/sylex
#   https://perso.crans.org/vanille
# Last updated {date_modified} and tested with Python 3.10
#
# File generated: {now}
"""

def verb_level(lv):
    def wrapper(fn):
        def inner(msg):
            if Trace.lv() >= Trace.lv(lv):
                print(fn().format(msg=msg))
        return inner
    return wrapper

class Trace:
    # Verbosities:
    #   d      debug
    #   i      info
    #   p      path
    #   n      none
    verbose = 'd'

    indent = 0

    def lv(label=None):
        if label is None: label = Trace.verbose
        match label:
            case 'n': return 0
            case 'p': return 1
            case 'i': return 2
            case 'd': return 3
            case _:
                raise ArgumentError(label)

    @verb_level('d')
    def debug():
        return '> {msg}'

    @verb_level('i')
    def info():
        return '? {msg}'

    colors = {
        'RED': '\x1b[31m',
        'GRN': '\x1b[32m',
        'YLW': '\x1b[33m',
        'BLU': '\x1b[34m',
        'PPL': '\x1b[35m',
        'WHT': '\x1b[0m',
    }

    def path(comment=None):
        def wrapper(fn):
            def inner(*args, **kwargs):
                aux = (Trace.lv() >= Trace.lv('p'))
                if aux:
                    print("{indent}{GRN}{name}{WHT} {{".format(
                        indent=' '*Trace.indent,
                        name=fn.__name__,
                        **Trace.colors,
                    ))
                    Trace.indent += 4
                    if comment is not None:
                        for line in comment.split('\n'):
                            print(' ' * Trace.indent + line.format(*args, **kwargs,
                                **Trace.colors))
                res = fn(*args, **kwargs)
                if aux:
                    Trace.indent -= 4
                    print(f"{' ' * Trace.indent}}}")
                return res
            return inner
        return wrapper

def is_filename(s):
    for c in s:
        if not (
            'a' <= c <= 'z' or
            'A' <= c <= 'Z' or
            c in "-_."
        ):
            return False
    return True

@Trace.path('Render {BLU}{0}.j2{WHT} to {BLU}{1}{WHT}')
def j2_render(src, dest, tabs=True, params={}):
    with open(f"{templ_dir}/{src}.j2", 'r') as f:
        template = j2.Template(f.read())
    text = template.render(
        header=autogen_header,
        build=build_dir,
        **params,
    )
    if not tabs:
        text = text.replace(" "*4, "\t")
    with open(dest, 'w') as f:
        f.write(text)

@Trace.path('Delete {BLU}{0}{WHT}')
def rm_r(path):
    if not os.path.exists(path):
        return
    if os.path.isfile(path) or os.path.islink(path):
        os.unlink(path)
    else:
        shutil.rmtree(path)

@Trace.path('Copy {BLU}{0}{WHT} to {BLU}{1}/{file}{WHT}')
def copy_file(src, dest, file=None):
    src = os.path.abspath(src)
    dest = os.path.abspath(dest)
    if file is not None:
        src = f"{src}/{file}"
        dest = f"{dest}/{file}"
    shutil.copy(src, dest)

class File:
    def __init__(self, path):
        spath = path.rsplit("/", 1)
        dir = spath[0] if len(spath) > 1 else ""
        name = spath[-1]
        sname = name.rsplit(".", 1)
        name = sname[0]
        ext = sname[1] if len(sname) > 1 else None
        self.dir = dir
        self.name = name
        self.ext = ext

    def with_prefix(self, pre):
        f = File("")
        f.dir = pre + ("/" if self.dir != "" else "") + self.dir
        f.name = self.name
        f.ext = self.ext
        return f

    def with_ext(self, ext):
        f = File("")
        f.dir = self.dir
        f.name = self.name
        f.ext = ext
        return f

    def try_ext(self, ext):
        if self.ext is None:
            return self.with_ext(ext)

    def without_ext(self):
        return self.with_ext(None)

    def basename(self):
        return self.name

    def filename(self):
        n = self.name
        if self.ext is not None:
            n += '.' + self.ext
        return n

    def exists(self):
        return os.path.isfile(self.path())

    def path(self):
        p = self.dir + "/" + self.name
        if self.ext != None:
            p += "." + self.ext
        return p.replace("./", "")

    def name_of_path(self):
        return self.path().replace("/", "__").replace("__", "/", 1)

    def __str__(self):
        return "File({})".format(self.path())

    def try_pdf(self):
        if (self.ext or "tex") == "tex":
            return self.with_ext("pdf")
        else:
            return self
