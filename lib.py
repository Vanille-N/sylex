# SyLeX
#   Build descriptor for LaTeX

import os
import shutil
import jinja2 as j2
import log

slx_dir = "/".join(d for d in __file__.split("/")[:-1] if d != ".")
templ_dir = f"{slx_dir}/templates"

local_slx_dir = ".sylex"
local_templ_dir = f"{local_slx_dir}/templates"
build_dir = "build"

py_files = ["error", "expand", "lib", "log", "parse", "sylex"]
j2_mk_files = ["common", "pdf", "param", "deps"]
j2_files = ["Makefile", "texwatch"] + [f + ".tex.mk" for f in j2_mk_files]

date_modified = "2022-01-07"
py_version = 10
now = __import__('datetime').datetime.now()
autogen_header = f"""\
# This file is autogenerated.
# It should not be edited manually, as it will be overwritten
# by `sylex init` without confirmation
#
# SyLeX
# Build tool for LaTeX
# Written by Vanille-N <vanille@crans.org> (Neven Villani)
#   https://github.com/Vanille-N/sylex
#   https://perso.crans.org/vanille
# Last updated {date_modified} and tested with Python 3.{py_version}
#
# File generated: {now}
"""

def is_filename(s):
    for c in s:
        if not (
            'a' <= c <= 'z' or
            'A' <= c <= 'Z' or
            c in "-_."
        ):
            return False
    return True

@log.path('Render {BLU}{0}.j2{WHT} to {BLU}{1}{WHT}')
def j2_render(src, dest, *, tabs=True, params={}):
    with open(f"{templ_dir}/{src}.j2", 'r') as f:
        template = j2.Template(f.read())
    text = template.render(
        header=autogen_header,
        build=build_dir,
        **params,
    )
    if not tabs:
        text = '\n'.join(
            line.replace(" "*4, "\t") if not line.startswith('#')
            else line for line in text.split('\n'))
    with open(dest, 'w') as f:
        f.write(text)

@log.path('Delete {BLU}{0}{WHT}')
def rm_r(path):
    if not os.path.exists(path):
        return
    if os.path.isfile(path) or os.path.islink(path):
        os.unlink(path)
    else:
        shutil.rmtree(path)

def copy_file(src, dest, file=None):
    @log.path('Copy {BLU}{0}{WHT}\nto {BLU}{1}{WHT}')
    def copy_file(src, dest):
        shutil.copy(src, dest)
    src = os.path.abspath(src)
    dest = os.path.abspath(dest)
    if file is not None:
        src = f"{src}/{file}"
        dest = f"{dest}/{file}"
    copy_file(src, dest)

class File:
    def __init__(self, path):
        spath = path.rsplit("/", 1)
        dir = spath[0] if len(spath) > 1 else ""
        name = spath[-1]
        sname = name.rsplit(".", 1)
        name = sname[0]
        ext = sname[1] if len(sname) > 1 else None
        self.dir = dir
        self.name = name
        self.ext = ext

    def with_prefix(self, pre):
        f = File("")
        f.dir = pre + ("/" if self.dir != "" else "") + self.dir
        f.name = self.name
        f.ext = self.ext
        return f

    def with_ext(self, ext):
        f = File("")
        f.dir = self.dir
        f.name = self.name
        f.ext = ext
        return f

    def try_ext(self, ext):
        if self.ext is None:
            return self.with_ext(ext)
        else:
            return self

    def without_ext(self):
        return self.with_ext(None)

    def basename(self):
        return self.name

    def filename(self):
        n = self.name
        if self.ext is not None:
            n += '.' + self.ext
        return n

    def exists(self):
        return os.path.isfile(self.path())

    def path(self):
        p = self.dir + ("/" if self.dir != '' else '') + self.name
        if self.ext != None:
            p += "." + self.ext
        return p.replace("./", "")

    def name_of_path(self):
        return self.path().replace("/", "__").replace("__", "/", 1)

    def __str__(self):
        return "File({})".format(self.path())
    def __repr__(self):
        return self.__str__()

    def try_pdf(self):
        if (self.ext or "tex") == "tex":
            return self.with_ext("pdf")
        else:
            return self
